// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockApplicant is a mock of Applicant interface.
type MockApplicant struct {
	ctrl     *gomock.Controller
	recorder *MockApplicantMockRecorder
}

// MockApplicantMockRecorder is the mock recorder for MockApplicant.
type MockApplicantMockRecorder struct {
	mock *MockApplicant
}

// NewMockApplicant creates a new mock instance.
func NewMockApplicant(ctrl *gomock.Controller) *MockApplicant {
	mock := &MockApplicant{ctrl: ctrl}
	mock.recorder = &MockApplicantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicant) EXPECT() *MockApplicantMockRecorder {
	return m.recorder
}

// GetDOB mocks base method.
func (m *MockApplicant) GetDOB() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDOB")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDOB indicates an expected call of GetDOB.
func (mr *MockApplicantMockRecorder) GetDOB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDOB", reflect.TypeOf((*MockApplicant)(nil).GetDOB))
}

// GetInitials mocks base method.
func (m *MockApplicant) GetInitials() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitials")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInitials indicates an expected call of GetInitials.
func (mr *MockApplicantMockRecorder) GetInitials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitials", reflect.TypeOf((*MockApplicant)(nil).GetInitials))
}

// HoldsLicense mocks base method.
func (m *MockApplicant) HoldsLicense() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HoldsLicense")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HoldsLicense indicates an expected call of HoldsLicense.
func (mr *MockApplicantMockRecorder) HoldsLicense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HoldsLicense", reflect.TypeOf((*MockApplicant)(nil).HoldsLicense))
}

// IsOver17 mocks base method.
func (m *MockApplicant) IsOver17() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOver17")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOver17 indicates an expected call of IsOver17.
func (mr *MockApplicantMockRecorder) IsOver17() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOver17", reflect.TypeOf((*MockApplicant)(nil).IsOver17))
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// LogStuff mocks base method.
func (m *MockLogger) LogStuff(v string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogStuff", v)
}

// LogStuff indicates an expected call of LogStuff.
func (mr *MockLoggerMockRecorder) LogStuff(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogStuff", reflect.TypeOf((*MockLogger)(nil).LogStuff), v)
}

// MockRandomNumberGenerator is a mock of RandomNumberGenerator interface.
type MockRandomNumberGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRandomNumberGeneratorMockRecorder
}

// MockRandomNumberGeneratorMockRecorder is the mock recorder for MockRandomNumberGenerator.
type MockRandomNumberGeneratorMockRecorder struct {
	mock *MockRandomNumberGenerator
}

// NewMockRandomNumberGenerator creates a new mock instance.
func NewMockRandomNumberGenerator(ctrl *gomock.Controller) *MockRandomNumberGenerator {
	mock := &MockRandomNumberGenerator{ctrl: ctrl}
	mock.recorder = &MockRandomNumberGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomNumberGenerator) EXPECT() *MockRandomNumberGeneratorMockRecorder {
	return m.recorder
}

// GetRandomNumbers mocks base method.
func (m *MockRandomNumberGenerator) GetRandomNumbers(len int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomNumbers", len)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRandomNumbers indicates an expected call of GetRandomNumbers.
func (mr *MockRandomNumberGeneratorMockRecorder) GetRandomNumbers(len interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomNumbers", reflect.TypeOf((*MockRandomNumberGenerator)(nil).GetRandomNumbers), len)
}
